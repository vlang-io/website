examples
Examples
-----
documentation
Documentation
-----
modules
Modules
-----
faq
FAQ
-----
built_in_v
Built in V
-----
the_v_lang
The V Programming Language
-----
v_slogan
Simple, fast, safe, compiled language for developing maintainable software
-----
includes_binaries 
includes binaries for 3 systems
-----
install_source 
Or install V from source 
-----
couple_seconds 
this will take a couple of seconds
-----
wip_info
V is an actively developed language at an early stage.
Features that are still being worked on are marked with $wip
<br> 
Everything else on this page and the docs has been implemented and open-sourced.
<p> 
By the time of the V 1.0 release planned for December 2019, there will be no $wip's left.
-----
forum
Forum
-----
blog
Blog 
-----
fast_compilation
Fast compilation
-----
safety
Safety
-----
performance 
Performance 
-----
simple_language_for_maintainable_programs
Simple language for building  maintainable programs 
-----
zero_deps 
400 KB compiler with zero dependencies
-----
c_translation 
C/C++ translation 
-----
introduction
Introduction 
-----
comments
Comments 
-----
functions
Functions 
-----
variables
Variables 
-----
basic_types 
Basic types 
-----
strings
Strings
-----
arrays
Arrays 
-----
maps
Maps 
-----
if
If 
-----
in_op 
In operator 
-----
for_loop 
For loop 
-----
switch 
Switch 
-----
structs 
Structs 
-----
access_mod 
Access modifiers 
-----
methods
Methods
-----
pure_fns 
Pure functions 
-----
high_fns 
High order functions 
-----
constants 
Constants 
-----
modules
Modules 
-----
interfaces
Interfaces 
-----
enums
Enums 
-----
optionals_and_errors 
Option types & error handling 
-----
generics
Generics 
-----
concurrency
Concurrency 
-----
decoding_json 
Decoding JSON 
-----
testing
Testing 
-----
memory_management 
Memory management 
-----
fast_comp1
V compiles between â‰ˆ100k and 1.2 million lines of code per second per CPU core. 
-----
fast_comp2
V compiles itself in 0.15 - 0.6 seconds.
-----
fast_comp3
-----
fast_comp4
-----
no_null
No null 
-----
references
References
-----
writing_documentation
Writing documentation
-----
advanced_topics
Advanced Topics
-----
calling_c_func_from_v
Calling C functions from V
-----
compile_time_if
Compile time if
-----
refl_via_codegen
Reflection via codegen
-----
limited_operator_overloading
Limited operator overloading
-----
inline_assembly
Inline assembly
-----
trans_cxx_to_v
Translating C/C++ to V
-----
hot_code_reloading
Hot code reloading
-----
cross_compile
Cross compilation
-----
cross_scripts_in_v
Cross-platform shell scripts in V
-----
appd_1_keywords
Appendix I: Keywords
-----
appd_2_operators
Appendix II: Operators
-----
intro_details
V is a statically typed compiled programming language designed for building maintainable software.

<p>
It's similar to Go and is also influenced by Oberon, Rust, Swift.

<p>
V is a very simple language. Going through this documentation will take you about half an hour,
and by the end of it you will learn pretty much the entire language.

<p>
Despite being simple, it gives a lot of power to the developer. Anything you can do in other languages,
you can do in V.
-----
fn_intro
<p>
Functions are declared with <code>fn</code>. Return type goes after the function
name. In this case <code>main</code> doesn't return anything, so the type is
omitted.

<p>
Just like in C and all related languages, <code>main</code> is an entry point.

<p>
<code>println</code> is one of the few built-in functions. It prints the value
to standard output.

<p><code>fn main()</code> declaration can be skipped in one file programs.
This is useful when writing small programs, "scripts", or just learning
the language. For brevity, <code>fn main()</code> will be skipped in this
tutorial.

<p>
This means that a "hello world" program can be as simple as
-----

