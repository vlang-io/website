examples
예제
-----
documentation
문서
-----
modules
모듈
-----
faq
FAQ
-----
built_in_v
V로 만든 것
-----
the_v_lang
V 프로그래밍 언어
-----
v_slogan
유지보수가 쉬운 소프트웨어 개발을 위한 간단하고, 빠르며, 안전한 컴파일 언어
-----
includes_binaries 
3 종류의 시스템을 위한 실행 파일
-----
install_source 
또는 소스 코드로 V를 설치
-----
couple_seconds 
이 작업에는 몇 초가 걸립니다.
-----
wip_info
V는 아직 초기 단계로, 활발하게 개발되는 언어입니다.
아직 작업 중인 기능은 $wip로 표시합니다.
<br> 
이 페이지와 문서에 적힌 모든 것들은 구현되어 있고, 소스가 공개되어 있습니다.
<p> 
2019년 12월에 예정된 V 1.0 배포 시에는 $wip는 남아 있지 않을 것입니다.
-----
forum
포럼
-----
blog
블로그
-----
fast_compilation
빠른 컴파일
-----
safety
안전성
-----
performance 
성능 
-----
simple_language_for_maintainable_programs
유지보수가 쉬운 프로그램을 위한 간단한 언어
-----
zero_deps 
의존성 없는 400 KB 컴파일러 
-----
c_translation 
C/C++ 변환 
-----
introduction
소개
-----
comments
주석
-----
functions
함수 
-----
variables
변수 
-----
basic_types 
기본 자료형 
-----
strings
문자열 
-----
arrays
배열 
-----
maps
맵 
-----
if
if 조건문
-----
in_op 
in 연산자 
-----
for_loop 
for 반복문 
-----
switch 
switch 조건문 
-----
structs 
구조체 
-----
access_mod 
접근 제어자 
-----
methods
메서드
-----
pure_fns 
순수 함수 
-----
high_fns 
고차 함수 
-----
constants 
상수 
-----
modules
모듈
-----
interfaces
인터페이스
-----
enums
열거형
-----
optionals_and_errors 
옵셔널 자료형 & 오류 처리 
-----
generics
제네릭
-----
concurrency
동시성
-----
decoding_json 
JSON 디코딩 
-----
testing
테스트
-----
memory_management 
메모리 관리 
-----
fast_comp1
V는 CPU 코어 별로 초당 약 120만 줄의 코드를 컴파일합니다.
-----
fast_comp2
이런 속도는 기계 코드의 직접 생성$wip과 강력한 모듈화 덕분입니다.
-----
fast_comp3
V는 자신을 컴파일 하는데 0.3 - 0.6 초 걸립니다.
-----
fast_comp4
V는 C로도 변환할 수 있는데, 이 경우 컴파일 속도가 CPU 코어 별로 초당 약 10만 줄로 떨어집니다.
-----
no_null
Null 없음
-----
-----
-----
-----
-----
-----
-----
-----
-----
-----
-----
-----
-----
-----


